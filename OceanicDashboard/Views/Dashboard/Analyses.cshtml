@model OceanicDashboard.Controllers.AnalysesViewModel
@{
    ViewData["Title"] = "Análises de Dados";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewData["Title"]</h4>
                </div>
                <div class="card-body">
                    <!-- Filtros -->
                    <form method="get" class="row g-3 mb-4">
                        <div class="col-md-4">
                            <label for="wavyId" class="form-label">Wavy ID</label>
                            <input type="text" class="form-control" id="wavyId" name="wavyId" value="@Model.WavyId">
                        </div>
                        <div class="col-md-4">
                            <label for="fromDate" class="form-label">Data Inicial</label>
                            <input type="datetime-local" class="form-control" id="fromDate" name="fromDate" 
                                   value="@(Model.FromDate?.ToString("yyyy-MM-ddTHH:mm"))">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">&nbsp;</label>
                            <div>
                                <button type="submit" class="btn btn-primary">Filtrar</button>
                                <a href="/Dashboard/Analyses" class="btn btn-secondary">Limpar</a>
                            </div>
                        </div>
                    </form>

                    <!-- Tabela de Análises -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">                            <thead class="table-dark">
                                <tr>
                                    <th>Wavy ID</th>
                                    <th>Data da Análise</th>
                                    <th>Padrão</th>
                                    <th>Média</th>
                                    <th>Desvio Padrão</th>
                                    <th>Amostras</th>
                                    <th>Tipo de Análise</th>
                                    <th>Resultado</th>
                                    <th>Dados</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Analyses)
                                {
                                    <tr>
                                        <td>@item.WavyId</td>                                        <td>@item.AnalysisTimestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.Pattern))
                                            {
                                                <span class="badge @(item.Pattern == "Normal" ? "bg-success" : 
                                                                   item.Pattern == "Anomaly" ? "bg-danger" : "bg-warning")">
                                                    @item.Pattern
                                                </span>
                                            }
                                        </td>
                                        <td>@(item.Mean.ToString("F2"))</td>
                                        <td>@(item.StandardDeviation.ToString("F2"))</td>
                                        <td>@(item.SampleCount)</td>
                                        <td>@(item.AnalysisType ?? "-")</td>
                                        <td>@(item.Pattern ?? "-")</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.AnalyzedData))
                                            {
                                                <span class="text-truncate" style="max-width: 200px; display: inline-block;" 
                                                      title="@item.AnalyzedData">Dados disponíveis</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (!Model.Analyses.Any())
                    {
                        <div class="alert alert-info text-center" role="alert">
                            <i class="bi bi-info-circle"></i>
                            Nenhuma análise encontrada para os filtros aplicados.
                        </div>
                    }

                    <!-- Paginação -->
                    @if (Model.TotalRecords > Model.PageSize)
                    {
                        <nav aria-label="Navegação de páginas">
                            <ul class="pagination justify-content-center">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(Model.CurrentPage - 1)&wavyId=@Model.WavyId&fromDate=@Model.FromDate">Anterior</a>
                                    </li>
                                }
                                
                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.CurrentPage + 2, (int)Math.Ceiling((double)Model.TotalRecords / Model.PageSize)); i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="?page=@i&wavyId=@Model.WavyId&fromDate=@Model.FromDate">@i</a>
                                    </li>
                                }
                                
                                @if (Model.CurrentPage < Math.Ceiling((double)Model.TotalRecords / Model.PageSize))
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(Model.CurrentPage + 1)&wavyId=@Model.WavyId&fromDate=@Model.FromDate">Próximo</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
